import pygame, math
import random
import time
from random import choice

pygame.init()
window = pygame.display.set_mode((1200, 800))
pygame.display.set_caption("Fractal Tree")
screen = pygame.display.get_surface()
imagenames = ["A.BMP","B.BMP","C.BMP","D.BMP","E.BMP","F.BMP","G.BMP","H.BMP","I.BMP","J.BMP"]
generaciones =[[]]


def dibujarArbolAux(x1, y1, angulo, angulo_de_ramificaciones,diametro_nivel,diametro_tronco,ramificaciones,decremento_pro,rango_pro):
   
    profundidad = random.randint(rango_pro[0], rango_pro[1])
    diametro_troncoR = random.randint(diametro_tronco[0], diametro_tronco[1])
    
    dibujarArbol(x1, y1, angulo, profundidad, angulo_de_ramificaciones,diametro_nivel,diametro_troncoR,ramificaciones,decremento_pro,rango_pro)


def dibujarArbol(x1, y1, angulo, profundidad, angulo_de_ramificaciones,diametro_nivel,diametro_tronco,ramificaciones,decremento_pro,rango_pro):

    if diametro_tronco <= 0:
            diametro_tronco=1
    angulo_de_ramificacionesR = random.randint(angulo_de_ramificaciones[0], angulo_de_ramificaciones[1])
    diametro_nivelR = random.randint(diametro_nivel[0], diametro_nivel[1])    
    decremento_proR = random.randint(decremento_pro[0], decremento_pro[1])

    ramasR = random.randint(ramificaciones[0], ramificaciones[1])
    ramas = ramasR
    angulo_aux = 0
    angulo_aux2 = angulo_de_ramificacionesR/ramas
    
    if profundidad > 0:
        x2 = x1 + int(math.cos(math.radians(angulo)) * profundidad * diametro_nivelR)
        y2 = y1 + int(math.sin(math.radians(angulo)) * profundidad * diametro_nivelR)
        
        pygame.draw.line(screen, (0,0,0), (x1, y1), (x2, y2), diametro_tronco)

        while ramas > 0:
           angulo_aux2 *= choice([-1, 1])
           angulo_aux = angulo_aux2 * random.randrange(ramasR)
           
           dibujarArbol(x2, y2, angulo + angulo_aux , profundidad - decremento_proR,angulo_de_ramificaciones,diametro_nivel,diametro_tronco-1,ramificaciones,decremento_pro,rango_pro)           
           ramas = ramas - 1
           
        
def input(event):
    if event.type == pygame.QUIT:
        exit(0)

def poblacion_inicial(angulo1,angulo2,diametronivel1,diametronivel2,grozor1,grozor2,ramificacion1,ramificacion2,decremento1,decremento2,profundidad1,profundidad2,imagen):
    gen = []
    dibujarArbolAux(600, 700, -90,
        [angulo1,angulo1+angulo2],[diametronivel1,diametronivel2],[grozor1,grozor2],[ramificacion1,ramificacion2],[decremento1,decremento2],[profundidad1,profundidad2])
    pygame.image.save(screen,imagenames[imagen])
    gen.append([pygame.image.load(imagenames[imagen]),[angulo1,angulo1+angulo2],[diametronivel1,diametronivel2],[grozor1,grozor2],[ramificacion1,ramificacion2],[decremento1,decremento2],[profundidad1,profundidad2]])
    generaciones[0] = generaciones[0] + gen
    pygame.display.flip()
    time.sleep(0.5)
    screen.fill((255,255,255))
def algortitmo_genetico():
    n = 0
    while n < 10:
        angulo1 = random.randint(1, 90)
        angulo2= random.randint(1,30)
        diametronivel1 = random.randint(1, 4)
        diametronivel2= random.randint(diametronivel1,4)
        grozor1 = random.randint(4, 10)
        grozor2= random.randint(grozor1,10)
        ramificacion1 = random.randint(1, 7)
        ramificacion2= random.randint(ramificacion1,7)
        decremento1 = random.randint(1,1)
        decremento2= random.randint(decremento1,1)
        profundidad1 = random.randint(1, 7)
        profundidad2= random.randint(profundidad1,7)
        poblacion_inicial(angulo1,angulo2,diametronivel1,diametronivel2,grozor1,grozor2,ramificacion1,ramificacion2,decremento1,decremento2,profundidad1,profundidad2,n)
        n = n+1
    print(generaciones)
algortitmo_genetico()
